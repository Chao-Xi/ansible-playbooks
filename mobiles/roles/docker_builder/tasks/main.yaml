- name: Print instance_tags jenkinsMasterId 
  debug: var=instance_tags.tags.JenkinsMasterId

- name: install pyenv
  include_role:
    name: avanov.pyenv
  vars:
    pyenv_path: "/home/ubuntu/pyenv"
    pyenv_owner: "ubuntu"
    pyenv_update_git_install: no
    pyenv_enable_autocompletion: no
    pyenv_python_versions:
       - "3.5.2"
       - "2.7.6"
    pyenv_virtualenvs:
       - venv_name: "k8s_py"
         py_version: '3.5.2'
       - venv_name: "ansible"
         py_version: '2.7.6'

- name: ensure kube dev config is updated
  copy:
    content: |
        {{ kubecfg_stage }}
    dest: "/home/{{ jenkins_builder }}/.kube/config_new_stage"
    owner: "{{ jenkins_builder }}"
    group: "{{ jenkins_builder }}"
    mode: 0644
  tags:
    - kube_config
  become: yes
    
- name: ensure kube dev config is updated
  copy:
    content: |
        {{ kubecfg_dev }}
    dest: "/home/{{ jenkins_builder }}/.kube/config_new_dev"
    owner: "{{ jenkins_builder }}"
    group: "{{ jenkins_builder }}"
    mode: 0600
  tags:
    - kube_config
  become: yes

- name: ensure kube test config is updated
  copy:
    content: |
        {{ kubecfg_dev }}
    dest: "/home/{{ jenkins_builder }}/.kube/config_new_test"
    owner: "{{ jenkins_builder }}"
    group: "{{ jenkins_builder }}"
    mode: 0600
  tags:
    - kube_config
  become: yes

 
- name: ensure kube prod config is updated
  copy:
    content: |
        {{ kubecfg_prod }}
    dest: "/home/{{ jenkins_builder }}/.kube/config_new_prod"
    owner: "{{ jenkins_builder }}"
    group: "{{ jenkins_builder }}"
    mode: 0600
  tags:
    - kube_config
  become: yes

- name: ensure requirements.txt exists
  copy:
    src: "{{ role_path }}/files/requirements.txt"
    dest: "/home/{{ jenkins_builder }}/pyenv/versions/k8s_py/requirements.txt"
  tags:
    - pip_file

- name: ensure all requirement install in k8s_py virtualenv
  pip:
    requirements: "/home/{{ jenkins_builder }}/pyenv/versions/k8s_py/requirements.txt"
    virtualenv: "/home/{{ jenkins_builder }}/pyenv/versions/k8s_py/"
  tags:
    - pip
    - python

- name: ensure all requirement install in ansible virtualenv
  pip:
    name: "{{ item }}"
    virtualenv: "/home/{{ jenkins_builder }}/pyenv/versions/ansible/"
  with_items:
    - ansible
    - boto3
  tags:
    - pip
    - python


###Install kubectl
- name: Check if kubectl v1.9.4 has been installed
  stat:
    path: /usr/local/bin/kubectl
    checksum_algorithm: sha256
  register: kubectl_path

- name: get kubectl v1.9.4 from s3 if not exist
  aws_s3:
    bucket: bbmobile-jenkins-archive
    object: /kubectl/kubectl.1.9.4
    dest: /usr/local/bin/kubectl
    mode: get
  when: (kubectl_path.stat.exists == False) or 
        (kubectl_path.stat.checksum != "1649bcda95e1662da0616a5314261285fa4154d769dc4148cc339d859b564c39")

- name: ensure right mod for kubectl
  file:
    path: /usr/local/bin/kubectl 
    owner: root
    group: root
    mode: 0755
  become: yes

####In sure docker prequisites installed
- name: Install the package "apt-transport-https"
  apt:
    name: apt-transport-https
    state: present
  become: yes

- name: Install the package "curl"
  apt:
    name: curl
    state: present
  become: yes

- name: Install the package "ca-certificates"
  apt:
    name: ca-certificates
    state: present
  become: yes
- name: Install the package "software-properties-common"
  apt:
    name: software-properties-common
    state: present
  become: yes


####In sure docker installed
###Install docker
- name: Install docker
  block:
    - name: Add docker apk key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: debug lsb
      debug:
        msg: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
    - name: add apt repo
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present
    
    - name: Update repositories cache and install "docker-ce" package
      apt:
        name: docker-ce=17.12.1~ce-0~ubuntu
        update_cache: yes
    - name: add group docker
      group:
        name: docker
        state: present
    - name: add ubuntu to docker group
      user:
        name: ubuntu
        groups: ubuntu,docker
  become: yes


- name: install sdk and gradle
  include_role:
      name: Comcast.sdkman
  vars:
    sdkman_dir: /usr/local/sdkman
    sdkman_auto_answer: true
    sdkman_update: true
    sdkman_install_packages:
      - { candidate: gradle, version: '2.4' }
    sdkman_defaults:
      gradle: '2.4'
    sdkman_flush_caches_before:
      - temp
    sdkman_flush_caches_after:
      - archives
      - broadcast
      - candidates
      - temp
